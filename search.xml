<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Array.flat原理实现</title>
      <link href="/2019/06/25/Array-flat%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/06/25/Array-flat%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS原理实现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6中import的循环依赖的理解</title>
      <link href="/2019/06/20/ES6%E4%B8%ADimport%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2019/06/20/ES6%E4%B8%ADimport%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="ES6-循环依赖的一个例子"><a href="#ES6-循环依赖的一个例子" class="headerlink" title="ES6 循环依赖的一个例子"></a>ES6 循环依赖的一个例子</h2><p>a.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;bar&#125; <span class="keyword">from</span> <span class="string">'./b.js'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    bar();  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'执行完毕'</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><p>b.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">'./a.js'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">        foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>babel-node a.js -&gt; 执行完毕</p><ol><li>import {bar} from ‘./b.js’ -&gt; 此时对b模块只是一个引用, 不会去执行</li><li>foo() -&gt; bar() -&gt; 执行b </li><li>import {foo} from ‘./a.js’ -&gt; 指向a.js 中的foo对象</li><li>Math.random() &gt; 0.5 条件成立执行 foo 跳到2, 否则 不执行, 直接执行5</li><li>执行完毕</li></ol><h2 id="ES6处理循环依赖"><a href="#ES6处理循环依赖" class="headerlink" title="ES6处理循环依赖"></a>ES6处理循环依赖</h2><p>ES6根本不关心会不会发生循环依赖, 只是生产一个指向被加载模块的一个引用, 这和CommonJS不同</p><p>上述代码webpack编译后如下:</p><figure class="highlight javascript"><figcaption><span>编译后源码</span><a href="https://functionrun.github.io/js/es6-import-1.js">完整</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (installedModules[moduleId]) &#123;</span><br><span class="line">            <span class="keyword">return</span> installedModules[moduleId];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line">            i: moduleId,</span><br><span class="line">            l: <span class="literal">false</span>,</span><br><span class="line">            exports: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line">        <span class="built_in">module</span>.l = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __webpack_require_.d = <span class="function"><span class="keyword">function</span>(<span class="params">exports, name, getter</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!__webpack_require__.o(exports, name)) &#123;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(exports, name, &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">get</span>: getter &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    __webpack_require__.r = <span class="function"><span class="keyword">function</span>(<span class="params">exports</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(exports, <span class="built_in">Symbol</span>.toStringTag, &#123; <span class="attr">value</span>: <span class="string">'Module'</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(exports, <span class="string">'__esModule'</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> __webpack_require__(__webpack_require__.s = <span class="string">"./test/index.ts"</span>);</span><br><span class="line">&#125;)(&#123;</span><br><span class="line">    <span class="string">'./test/a.ts'</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class="line">        __webpack_require__.r(__webpack_exports__);</span><br><span class="line">        __webpack_require__.d(__webpack_exports__, <span class="string">"foo"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> foo; &#125;);</span><br><span class="line">        <span class="keyword">var</span> _b__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(<span class="comment">/*! ./b */</span> <span class="string">"./test/b.ts"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">Object</span>(_b__WEBPACK_IMPORTED_MODULE_0__[<span class="string">"bar"</span>])();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'foo 执行完毕'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        foo();</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="string">'./test/b.ts'</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class="line">        __webpack_require__.r(__webpack_exports__);</span><br><span class="line">        __webpack_require__.d(__webpack_exports__, <span class="string">"bar"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> bar; &#125;);</span><br><span class="line">        <span class="keyword">var</span> _a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(<span class="comment">/*! ./a */</span> <span class="string">"./test/a.ts"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">                <span class="built_in">Object</span>(_a__WEBPACK_IMPORTED_MODULE_0__[<span class="string">"foo"</span>])();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="string">'./test/index.ts'</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class="line">        __webpack_require__.r(__webpack_exports__);</span><br><span class="line">        <span class="keyword">var</span> _a_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(<span class="comment">/*! ./a.ts */</span> <span class="string">"./test/a.ts"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 说明当前module是使用ES6模块</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(exports, <span class="string">'__esModule'</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="ES6-输出值的引用"><a href="#ES6-输出值的引用" class="headerlink" title="ES6 输出值的引用"></a>ES6 输出值的引用</h2><p>a.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">'./b'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(foo);</span><br><span class="line">    <span class="keyword">import</span>(<span class="string">'./b'</span>).then(<span class="function">(<span class="params">&#123;foo&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(foo);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>b.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    foo = <span class="number">2</span>;</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br></pre></td></tr></table></figure><ol><li>babel-node a.js </li><li>-&gt; 1 -&gt; 2 -&gt; 2 </li></ol><figure class="highlight javascript"><figcaption><span>编译后源码</span><a href="https://functionrun.github.io/js/es6-import-2.js">完整</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (installedModules[moduleId]) &#123;</span><br><span class="line">            <span class="keyword">return</span> installedModules[moduleId];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line">            i: moduleId,</span><br><span class="line">            l: <span class="literal">false</span>,</span><br><span class="line">            exports: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line">        <span class="built_in">module</span>.l = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __webpack_require__.r = <span class="function"><span class="keyword">function</span>(<span class="params">exports</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(exports, <span class="built_in">Symbol</span>.toStringTag, &#123; <span class="attr">value</span>: <span class="string">'Module'</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(exports, <span class="string">'__esModule'</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> __webpack_require__(__webpack_require__.s = <span class="string">"./other/index.ts"</span>);</span><br><span class="line">&#125;)(&#123;</span><br><span class="line">    <span class="string">'./other/a.ts'</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class="line">        __webpack_require__.r(__webpack_exports__);</span><br><span class="line">        <span class="keyword">var</span> _b__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(<span class="comment">/*! ./b */</span> <span class="string">"./other/b.ts"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(_b__WEBPACK_IMPORTED_MODULE_0__[<span class="string">"foo"</span>]);</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(_b__WEBPACK_IMPORTED_MODULE_0__[<span class="string">"foo"</span>]);</span><br><span class="line">            <span class="built_in">Promise</span>.resolve(<span class="comment">/*! import() */</span>).then(__webpack_require__.bind(<span class="literal">null</span>, <span class="comment">/*! ./b */</span> <span class="string">"./other/b.ts"</span>)).then(<span class="function">(<span class="params">&#123; foo &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(foo);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="string">'./other/b.ts'</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class="line">        __webpack_require__.r(__webpack_exports__);</span><br><span class="line">        __webpack_require__.d(__webpack_exports__, <span class="string">"foo"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> foo; &#125;);</span><br><span class="line">        <span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            foo = <span class="number">2</span>;</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="string">'./other/index.ts'</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class="line">        __webpack_require__.r(__webpack_exports__);</span><br><span class="line">        <span class="keyword">var</span> _a_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(<span class="comment">/*! ./a.ts */</span> <span class="string">"./other/a.ts"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="ES6模块的特性"><a href="#ES6模块的特性" class="headerlink" title="ES6模块的特性 "></a>ES6模块的特性 </h2><ol><li>import 命令会被javascript 引擎静态分析, 又闲鱼模块内的其它内容执行</li><li>export 命令会有变量声明提前的效果</li></ol><p>a.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'a.js'</span>)</span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">'./b'</span>;</span><br></pre></td></tr></table></figure><p>b.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'b.js 先执行'</span>);</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b.js 先执行</span><br><span class="line">a.js </span><br></pre></td></tr></table></figure><p>参考文章 </p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Module </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CommonJS中require的循环依赖理解</title>
      <link href="/2019/06/20/CommonJS%E4%B8%ADrequire%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%90%86%E8%A7%A3/"/>
      <url>/2019/06/20/CommonJS%E4%B8%ADrequire%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Nodejs-官网的一个循环依赖的例子"><a href="#Nodejs-官网的一个循环依赖的例子" class="headerlink" title="Nodejs 官网的一个循环依赖的例子"></a>Nodejs 官网的一个循环依赖的例子</h2><p>a.js </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;a starting&apos;);</span><br><span class="line">exports.done = false;</span><br><span class="line">const b = require(&apos;./b.js&apos;);</span><br><span class="line">console.log(&apos;in a, b.done = %j&apos;, b.done);</span><br><span class="line">exports.done = true;</span><br><span class="line">console.log(&apos;a done&apos;);</span><br></pre></td></tr></table></figure><p>b.js </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;b starting&apos;);</span><br><span class="line">exports.done = false;</span><br><span class="line">const a = require(&apos;./a.js&apos;);</span><br><span class="line">console.log(&apos;in b, a.done = %j&apos;, a.done);</span><br><span class="line">exports.done = true;</span><br><span class="line">console.log(&apos;b done&apos;);</span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;main starting&apos;);</span><br><span class="line">const a = require(&apos;./a.js&apos;);</span><br><span class="line">const b = require(&apos;./b.js&apos;);</span><br><span class="line">console.log(&apos;in main, a.done = %j, b.done = %j&apos;, a.done, b.done);</span><br></pre></td></tr></table></figure><p>运行node index.js后输出顺序如下</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">main starting</span><br><span class="line">a starting</span><br><span class="line">b starting</span><br><span class="line">in b, a.done = false</span><br><span class="line">b done</span><br><span class="line">in a, b.done = true</span><br><span class="line">a done</span><br><span class="line">in main, a.done = true, b.done = true</span><br></pre></td></tr></table></figure><h2 id="CommonJS规范的执行逻辑如下"><a href="#CommonJS规范的执行逻辑如下" class="headerlink" title="CommonJS规范的执行逻辑如下"></a>CommonJS规范的执行逻辑如下</h2><ol><li><p>执行 main.js -&gt; main starting</p></li><li><p>require(‘./a.js’) -&gt; 执行a.js -&gt; a starting</p></li><li><p>exports.done = false -&gt; 内存中针对a模块对应对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    id: &apos;模块名a&apos;,</span><br><span class="line">    exports: &#123;done: false&#125;,</span><br><span class="line">    loaded: false,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>require(‘./b.js’) -&gt; 执行b.js -&gt; a.js代码暂停 -&gt; b starting</p></li><li><p>exports.done = false; -&gt; 内存中针对b模块对应对象 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    id: &apos;模块名b&apos;,</span><br><span class="line">    exports: &#123;done: false&#125;,</span><br><span class="line">    loaded: false,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>reuqire(‘./a.js’) -&gt; 加载a.js 发生循环依赖 -&gt; a 模块对应的模块对象的exports.done: false -&gt; in b, a.done = false</p></li><li><p>继续执行b.js exports.done = true  -&gt; b done</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    id: &apos;模块名b&apos;,</span><br><span class="line">    exports: &#123;done: true&#125;,</span><br><span class="line">    loaded: true,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>继续执行a.js -&gt; in a, b.done = true</p></li><li><p>执行 a.js exports.done = true -&gt; b done </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    id: &apos;模块名a&apos;,</span><br><span class="line">    exports: &#123;done: true&#125;,</span><br><span class="line">    loaded: true,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>main.js in main, a.done = true, b.done = true</p></li></ol><h2 id="CommonJS规范如何处理循环加载"><a href="#CommonJS规范如何处理循环加载" class="headerlink" title="CommonJS规范如何处理循环加载"></a>CommonJS规范如何处理循环加载</h2><p>CommonJS模块的重要特性就是加载时执行, 当脚本require时, 就会全部执行; 并且在内存中生成一个对象, 遇到某个模块循环加载, 则只输出已经执行的部分, 还未执行的部分不会输出.</p><blockquote><p>reuqire()源码解读<br><a href="http://www.ruanyifeng.com/blog/2015/05/require.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/05/require.html</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    id: &apos;模块名&apos;,</span><br><span class="line">    exports: &#123;&#125;, // 以后用到该模块就会取在exports的值, 不会重新执行模块.</span><br><span class="line">    loaded: true, // 表示该模块的脚本是否执行完毕</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack 对require 的编译如下:</p><figure class="highlight plain"><figcaption><span>编译后源码</span><a href="https://functionrun.github.io/js/CommonJS-require.js">完整</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">(function(modules) &#123;</span><br><span class="line">    var installedModules = &#123;&#125;;</span><br><span class="line">    function __webpack_require__(moduleId) &#123;</span><br><span class="line">        if (installedModules[moduleId]) &#123;</span><br><span class="line">            return installedModules[moduleId];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var module = installedModules[moduleId] = &#123;</span><br><span class="line">            i: moduleId,</span><br><span class="line">            l: false,</span><br><span class="line">            exports: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);</span><br><span class="line">        module.l = true;</span><br><span class="line">        return module.exports;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __webpack_require_.d = function(exports, name, getter) &#123;</span><br><span class="line">        if(!__webpack_require__.o(exports, name)) &#123;</span><br><span class="line">            Object.defineProperty(exports, name, &#123; enumerable: true, get: getter &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    __webpack_require__.r = function(exports) &#123;</span><br><span class="line">        if(typeof Symbol !== &apos;undefined&apos; &amp;&amp; Symbol.toStringTag) &#123;</span><br><span class="line">            Object.defineProperty(exports, Symbol.toStringTag, &#123; value: &apos;Module&apos; &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        Object.defineProperty(exports, &apos;__esModule&apos;, &#123; value: true &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    return __webpack_require__(__webpack_require__.s = &quot;./server/index.js&quot;);</span><br><span class="line">&#125;)(&#123;</span><br><span class="line">    &quot;./server/a.js&quot;: (function(module, exports, __webpack_require__) &#123;</span><br><span class="line">        console.log(&apos;a starting&apos;);</span><br><span class="line">        exports.done = false;</span><br><span class="line">        const b = __webpack_require__(&quot;./server/b.js&quot;);</span><br><span class="line">        console.log(&apos;in a, b.done = %j&apos;, b.done);</span><br><span class="line">        exports.done = true;</span><br><span class="line">        console.log(&apos;a done&apos;);</span><br><span class="line">    &#125;),</span><br><span class="line">    &quot;./server/b.js&quot;: (function(module, exports, __webpack_require__) &#123;</span><br><span class="line">        console.log(&apos;b starting&apos;);</span><br><span class="line">        exports.done = false;</span><br><span class="line">        const a = __webpack_require__(&quot;./server/a.js&quot;);</span><br><span class="line">        console.log(&apos;in b, a.done = %j&apos;, a.done);</span><br><span class="line">        exports.done = true;</span><br><span class="line">        console.log(&apos;b done&apos;);</span><br><span class="line">    &#125;),</span><br><span class="line">    &quot;./server/index.js&quot;: (function(module, exports, __webpack_require__) &#123;</span><br><span class="line">        console.log(&apos;main starting&apos;);</span><br><span class="line">        const a = __webpack_require__(&quot;./server/a.js&quot;);</span><br><span class="line">        const b = __webpack_require__(&quot;./server/b.js&quot;);</span><br><span class="line">        console.log(&apos;in main, a.done = %j, b.done = %j&apos;, a.done, b.done);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Module </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise实现&amp;Promise/A+规范</title>
      <link href="/2019/06/19/Promise%E5%AE%9E%E7%8E%B0-Promise-A-%E8%A7%84%E8%8C%83/"/>
      <url>/2019/06/19/Promise%E5%AE%9E%E7%8E%B0-Promise-A-%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS原理实现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Hooks</title>
      <link href="/2019/06/18/React-Hooks/"/>
      <url>/2019/06/18/React-Hooks/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中间件</title>
      <link href="/2019/06/17/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2019/06/17/%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>wiki:</p><blockquote><p>中间件Middleware, 是提供系统软件和应用软件之间连接的软件, 以便软件各部分之间的沟通, 特别是应用软件对于系统软件的集中的逻辑<br>在现代信息技术应用框架如Web服务、面向服务的体系结构中应用广泛、如数据库Apache的Tomcat, IBM的websphere, BEA公司的WebLogic…</p></blockquote><a id="more"></a><h2 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h2><p>中间件的本质就是一个函数, 在收到请求和返回响应的过程中做一些我们想要做的事情, 见如下描述:</p><blockquote><p>执行任何代码, 修改请求和响应对象 -&gt; 终结请求-&gt; 响应循环 -&gt; 调用堆栈中的下一个中间件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&apos;express&apos;);</span><br><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line">app.use(&apos;/user&apos;, function(req, res, next) &#123;</span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(8080)</span><br></pre></td></tr></table></figure><p>Express中有以下5类中间件</p><ul><li>应用级中间件</li><li>路由级中间件</li><li>错误处理中间件</li><li>内置中间件</li><li>第三方中间件</li></ul><h2 id="Koa中间件"><a href="#Koa中间件" class="headerlink" title="Koa中间件"></a>Koa中间件</h2><ul><li>koa-router、koa-compress、koa-respond、kors、koa-convert、koa-bodyparser、koa-compose、koa-static</li></ul><p>Koa2 基于async\await实现中间件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function logger(format) &#123;</span><br><span class="line">    format = format || &apos;:methos &quot;:url&quot;&apos;;</span><br><span class="line">    return async function logger(ctx, next) &#123;</span><br><span class="line">        const str = format.replace(&apos;:method&apos;, ctx.method).replace(&apos;:url&apos;, ctx.url);</span><br><span class="line">        console.log(str);</span><br><span class="line">        await next();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">app.use(logger());</span><br><span class="line">app.use(logger(&apos;:method :url&apos;));</span><br></pre></td></tr></table></figure><p>Koa1 给予Generator</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const koa = require(&apos;koa&apos;);</span><br><span class="line">const app = koa();</span><br><span class="line">app.use(function*(next) &#123;</span><br><span class="line">    console.log(&apos;before middleware&apos;);</span><br><span class="line">    yield next;</span><br><span class="line">    console.log(&apos;after middleware&apos;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Redux-中间件"><a href="#Redux-中间件" class="headerlink" title="Redux 中间件"></a>Redux 中间件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// applyMiddleware</span><br><span class="line">function compose(...funcs) &#123;</span><br><span class="line">    if (funcs.length === 0) &#123;</span><br><span class="line">        return arg =&gt; arg;</span><br><span class="line">    &#125;</span><br><span class="line">    if (funcs.length === 1) &#123;</span><br><span class="line">        return funcs[0];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return funcs.reduce((a, b) =&gt; (...args) =&gt; a(b(...agrs)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default function applyMiddleware(...middlewares) &#123;</span><br><span class="line">    return createStore =&gt; (...args) =&gt; &#123;</span><br><span class="line">        const store = createStore(...args);</span><br><span class="line">        let dispatch = () =&gt; &#123;</span><br><span class="line">            throw new Error(&apos;XXXX&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">        const middlewareAPI = &#123;</span><br><span class="line">            getState: store.getState,</span><br><span class="line">            dispatch: (...agrs) =&gt; dispatch(...args)</span><br><span class="line">        &#125;</span><br><span class="line">        const chain = middlewares.map(middleware =&gt; middleware(middlewareAPI));</span><br><span class="line">        dispatch = compose(...chain)(store.dispatch);</span><br><span class="line">        return &#123;</span><br><span class="line">            ...store,</span><br><span class="line">            dispatch</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const logger = (&#123;getState, dispatch&#125;) =&gt; next =&gt; action =&gt; &#123;</span><br><span class="line">    console.log(&apos;before next &apos;, action);</span><br><span class="line">    const returnValue = next(action);</span><br><span class="line">    console.log(&apos;after next, getState());</span><br><span class="line">    return returnValue;</span><br><span class="line">&#125;</span><br><span class="line">let store = createStore(reducer, initState, applyMiddleware(logger));</span><br><span class="line">/** 现在尝试发送一个 action**/</span><br><span class="line">store.dispatch(&#123;</span><br><span class="line">    type: &apos;CHANGE_SCORE&apos;,</span><br><span class="line">    score: 0.8</span><br><span class="line">&#125;)</span><br><span class="line">/** 打印:**/</span><br><span class="line">// 【logger】即将执行: &#123; type: &apos;CHANGE_SCORE&apos;, score: 0.8 &#125;</span><br><span class="line">// 【logger】执行完成后 state: &#123; score: 0.8 &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// redux-thunk</span><br><span class="line">const thunk = (&#123;getState, dispatch&#125;) =&gt; next =&gt; action =&gt; &#123;</span><br><span class="line">    if (typeof action  === &apos;function&apos;) &#123;</span><br><span class="line">        return action(dispatch, getState);</span><br><span class="line">    &#125;</span><br><span class="line">    return next(action);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解React Fiber</title>
      <link href="/2019/06/15/%E7%90%86%E8%A7%A3React-Fiber/"/>
      <url>/2019/06/15/%E7%90%86%E8%A7%A3React-Fiber/</url>
      
        <content type="html"><![CDATA[<h2 id="React-渲染时的问题"><a href="#React-渲染时的问题" class="headerlink" title="React 渲染时的问题"></a>React 渲染时的问题</h2><p>当组件比较大时, js的执行会占用主线程时间, 此时对动画和手势会出现响应变差.<br>针对这个问题React, 对核心算法 reconciliation 进行了重写 -&gt; Fiber.</p><a id="more"></a><p>以下图片形象说明了stack reconciler 和 fiber reconciler在渲染上的差别<br><img src="/images/stack-reconciler.gif" alt><br><img src="/images/fiber-reconciler.gif" alt></p><h2 id="Fiber-tree-是一个单链表树结构"><a href="#Fiber-tree-是一个单链表树结构" class="headerlink" title="Fiber-tree 是一个单链表树结构"></a>Fiber-tree 是一个单链表树结构</h2><p>在stack reconciler 下React 会创建以下几种实例<br><img src="/images/stack-reconciler-instances.png" alt></p><p>fiber reconciler 中会创建以下实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">DOM</span><br><span class="line">    真是DOM节点</span><br><span class="line">------</span><br><span class="line">effect</span><br><span class="line">    每个workInProgress tree 节点上都有一个effect list</span><br><span class="line">    用于存放diff的结果</span><br><span class="line">    当前节点更新完毕后会向上merge effect list, 此时queue会收集diff结果</span><br><span class="line">- - - -</span><br><span class="line">workInProgress</span><br><span class="line">    workInProgress tree是reconcile过程中从fiber tree建立的当前进度快照, 用于断点恢复</span><br><span class="line">- - - -</span><br><span class="line">filber</span><br><span class="line">    fiber tree 和 vDOM tree类似, 用来描述增量更新所需的上下文信息, fiber结构如下</span><br><span class="line">    &#123;</span><br><span class="line">        stateNode, // 管理Instance 自身的特性</span><br><span class="line">        child, // 当前节点的孩子节点</span><br><span class="line">        return, // 表示处理完成后返回结果所要合并的目标, 通常指向父节点</span><br><span class="line">        sibling, // 当前节点的下一个兄弟节点</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">------</span><br><span class="line">Elements</span><br><span class="line">    描述UI长什么样子</span><br><span class="line">    &#123;</span><br><span class="line">        type,</span><br><span class="line">        props,</span><br><span class="line">        children</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><p><a href="https://juejin.im/post/5ab7b3a2f265da2378403e57" target="_blank" rel="noopener">https://juejin.im/post/5ab7b3a2f265da2378403e57</a><br><a href="https://juejin.im/entry/5b9885496fb9a05cf3711471" target="_blank" rel="noopener">https://juejin.im/entry/5b9885496fb9a05cf3711471</a><br><a href="https://raphamorim.io/understanding-react-fiber-incremental-rendering-feature/" target="_blank" rel="noopener">https://raphamorim.io/understanding-react-fiber-incremental-rendering-feature/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React Fiber </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>script标签defer vs async</title>
      <link href="/2019/06/14/script%E6%A0%87%E7%AD%BEdefer-vs-async/"/>
      <url>/2019/06/14/script%E6%A0%87%E7%AD%BEdefer-vs-async/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/js-defer-async.png" alt></p><a id="more"></a><ol><li>如果async为true，那么脚本在下载完成后异步执行。</li><li>如果async为false，defer为true，那么脚本会在页面解析完毕之后执行。</li><li>如果async和defer都为false，那么脚本会在页面解析中，停止页面解析，立刻下载并且执行</li></ol><h2 id="浏览器处理script"><a href="#浏览器处理script" class="headerlink" title="浏览器处理script"></a>浏览器处理script</h2><ol><li><code>&lt;script src=&quot;a.js&quot;&gt;&lt;/script&gt;</code> 浏览器会立即加载并执行脚本, 也就是在渲染该script标签之下的文档元素前, 就会加载并之下.</li><li><code>&lt;script src=&quot;b.js&quot; defer&gt;&lt;/script&gt;</code> defer 加载后续文档元素的过程和加载b.js 并行进行(异步), 但是b.js的之下会在所有元素解析完成之后, DOMContentLoaded 事件触发之前完成. DOMContentLoaded事件是当初始的HTML文档被完全加载和解析完成之后触发, 不需要等待样式表、图像和子框架的加载完成.</li><li><code>&lt;script src=&quot;c.js&quot; async&gt;&lt;/script&gt;</code> async 加载和渲染后续文档元素的过程将和c.js的加载和执行并行进行(异步)</li></ol><p><img src="/images/js-defer-async-2.jpeg" alt></p><ol><li>相同点: defer&amp;async 在网络下载的过程时一样的, 都是异步的(和HTML解析).</li><li>执行时间不同: 下载到执行的时间不同</li><li>执行顺序不同: defer会按照加载顺序执行, async的执行会乱序</li></ol>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS元素居中</title>
      <link href="/2019/06/13/CSS%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD/"/>
      <url>/2019/06/13/CSS%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h2><ul><li>单行文本水平垂直&amp;垂直居中: text-align、line-height, 元素必须有高度</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .single-text &#123;</span><br><span class="line">        height: 50px;</span><br><span class="line">        line-height: 50px;</span><br><span class="line">        background: #000;</span><br><span class="line">        color:#ee00ff;</span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;single-text&quot;&gt;</span><br><span class="line">    这里是一个单行文本</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>多行文本垂直居中: display: table-cell 、vertical-align: middle;</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .mult-text &#123;</span><br><span class="line">        width: 400px;</span><br><span class="line">        height: 90px;</span><br><span class="line">        background: #ee00ff;</span><br><span class="line">        color: #000;</span><br><span class="line">        display: table-cell;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;mult-text&quot;&gt;</span><br><span class="line">    多行文本垂直居中: display: table-cell 、vertical-align: middle;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>div 垂直居中: 父元素 display: table-cell; vertical-align: middle;</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .table-parent &#123;</span><br><span class="line">        background: #000;</span><br><span class="line">        height: 60px;</span><br><span class="line">        display: table-cell;</span><br><span class="line">        color: #fff;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;table-parent&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;table&quot;&gt;</span><br><span class="line">        display: table-cell;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>div水平垂直居中: 父元素relative. 子元素: absolute left right bottom top : 9; margin: auto; 子元素有高度、宽度</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .relative-parent &#123;</span><br><span class="line">        background: #000;</span><br><span class="line">        height: 90px;           </span><br><span class="line">        color: #fff;</span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    .position-child &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        height: 50px;</span><br><span class="line">        width: 300px;</span><br><span class="line">        left: 0;</span><br><span class="line">        right: 0;</span><br><span class="line">        bottom: 0;</span><br><span class="line">        top: 0;</span><br><span class="line">        margin: auto;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;relative-parent&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;position-child&quot;&gt;</span><br><span class="line">        父元素relative. 子元素: absolute;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>绝对定位&amp;负值, 子元素有宽度、高度</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .parent &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: #e0ffee;</span><br><span class="line">    &#125;</span><br><span class="line">    .child &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        top: 50%;</span><br><span class="line">        margin-top: -50px;</span><br><span class="line">        left: 50%;</span><br><span class="line">        margin-left: -50px;</span><br><span class="line">        background: #2545c4;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>同上.绝对定位&amp;translate 子元素不需要有宽度、高度</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .parent-translate &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: #e0ffee;</span><br><span class="line">    &#125;</span><br><span class="line">    .child-translate &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        background: #2545c4;</span><br><span class="line">        left: 50%;</span><br><span class="line">        top: 50%;</span><br><span class="line">        padding: 20px;</span><br><span class="line">        transform: translateX(-50%) translateY(-50%);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;parent-translate&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;child-translate&quot;&gt;</span><br><span class="line">        哈哈这里是一个子元素哦哦哦哦</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>div水平垂直居中: 负元素dispaly: flex; juestify-content: center; align-item: center;</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .flex-parent &#123;</span><br><span class="line">        background: #2545c4;</span><br><span class="line">        height: 90px;</span><br><span class="line">        color: #fff;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        align-items: center;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    .flex-child &#123;</span><br><span class="line">        background-color: #e0ffee;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;flex-parent&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;flex-child&quot;&gt;</span><br><span class="line">        父元素flex</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS-渲染原理二 渲染层合并 Composite</title>
      <link href="/2019/06/12/CSS-%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%BA%8C-%E6%B8%B2%E6%9F%93%E5%B1%82%E5%90%88%E5%B9%B6%20Composite/"/>
      <url>/2019/06/12/CSS-%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%BA%8C-%E6%B8%B2%E6%9F%93%E5%B1%82%E5%90%88%E5%B9%B6%20Composite/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://juejin.im/entry/59dc9aedf265da43200232f9" target="_blank" rel="noopener">https://juejin.im/entry/59dc9aedf265da43200232f9</a></p></blockquote><p>上一篇描述了针对transform、opacity动画化的元素, 浏览器会提升一个合成层来优化渲染<br>以下几点也会导致浏览器将元素提升到一个新的渲染层.</p><ol><li>position: fixed; 直接是一个新的Layer</li><li>will-change: transform, opacity; 两者设置其一就会形成 一个新的Layer</li><li>translation: transform || opacity || translate3d || filter || backdrop-filter; 需要结合对transform 值的改变才会形成.</li><li>video, canvas, iframe; 直接是一个新的Layer;</li><li>perspective</li><li>元素A有一个z-index 比自己小的元素B, B是一个合成层(即该元素在复合层上渲染), 则A会提升位合成层(composite隐式合成);<a id="more"></a>渲染层合并 Composite</li></ol><hr><blockquote><p><a href="http://taobaofed.org/blog/2016/04/25/performance-composite/" target="_blank" rel="noopener">http://taobaofed.org/blog/2016/04/25/performance-composite/</a><br><a href="http://jartto.wang/2017/08/28/how-to-optimize-marker-of-AMap/" target="_blank" rel="noopener">http://jartto.wang/2017/08/28/how-to-optimize-marker-of-AMap/</a><br><a href="https://www.cnblogs.com/feng9exe/p/10907959.html" target="_blank" rel="noopener">https://www.cnblogs.com/feng9exe/p/10907959.html</a></p></blockquote><ol><li>DOM树中每个节点都会对应一个LayoutObject, 处于相同坐标空间的LayoutObject会形成一个RenderLayers(渲染层);</li><li>RenderLayers保证页面元素以正确的顺序合成, 此时就会出现层合成(composite), 以正确的处理透明元素和重叠元素</li></ol><h2 id="ReanderLayers-amp-GraphicsLayers"><a href="#ReanderLayers-amp-GraphicsLayers" class="headerlink" title="ReanderLayers &amp; GraphicsLayers"></a>ReanderLayers &amp; GraphicsLayers</h2><p><img src="/images/render-object-layers.png" alt></p><p>上图</p><ul><li>RenderLayers渲染层，是负责对应DOM子树</li><li>GraphicsLayers图形层, 是负责对应RenderLayers子树</li></ul><ol><li>RenedrObjects保持树结构, RenderObject记录如何绘制一个node的内容, RenderObject 通过向绘图上下文(GraphicsContext)发出绘制来绘制nodes</li><li>GraphicsLayer有一个GraphicsContext, GraphicsContext负责输出该层的位图, 位图存储在共享内存中, 作为纹理上传到GPU</li><li>最后有GPU将多个位图合成, draw到屏幕上</li><li>某些特殊的渲染层会被认为是合成层(Compositing Layers), 合成层拥有单独的GraphicsLayers. </li><li>其他非合成层的渲染层, 会和其第一个拥有GraphicsLayer父层公用一个.</li></ol><h2 id="composite-隐式合成"><a href="#composite-隐式合成" class="headerlink" title="composite 隐式合成"></a>composite 隐式合成</h2><p>一个或多个非合成元素如果出现在堆叠顺序上的合成元素之上, 则会提升到合成层, 即被绘制成分离的图像, 将图像交给GPU处理.<br>例如: 元素A有一个z-index 比自己小的元素B, B是一个合成层(即该元素在复合层上渲染), 则A会提升位合成层(composite隐式合成);</p><h2 id="层压缩-amp-层爆炸"><a href="#层压缩-amp-层爆炸" class="headerlink" title="层压缩&amp;层爆炸"></a>层压缩&amp;层爆炸</h2><p>浏览器为处理大量合成层的情况, 会对层做Layer Squashing(层压缩)的处理, 但是以下情况无法进行层压缩.</p><p>当有大量额外的合成层时, 会出现层爆炸的现象.</p><ol><li>无法进行会打破渲染顺序的压缩</li><li>video元素的渲染层无法被压缩同时也无法将别的渲染层压缩到video所在的合成层上</li><li>iframe、plugin的渲染层无法被压缩同时也无法将别的渲染层压缩到iframe所在的合成层上</li><li>无法压缩有reflection属性的渲染层</li><li>无法压缩有blend mode属性的渲染层</li><li>当渲染层和合成层有不同的裁减容器时, 该渲染层无法压缩</li><li>相对于合成层滚动的渲染层无法被压缩</li><li>当渲染层和合成层有不同的具有opacity的祖先层(一个设置了opacity &lt; 1, 一个没有设置opacity也算不同), 该渲染层无法压缩</li><li>当渲染层和合成层有不同的具有transform的祖先层时, 该渲染层无法压缩</li><li>当渲染层和合同层有不同的具有filter的祖先层时, 该渲染层无法压缩</li><li>当覆盖的合成层正在运行动画时, 该渲染层无法压缩, 当动画未开始或者运行完毕以后, 该渲染层才可以被压缩</li></ol>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 渲染原理一渲染过程</title>
      <link href="/2019/06/11/CSS-%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%B8%80-%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B/"/>
      <url>/2019/06/11/CSS-%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%B8%80-%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>如下代码</p><h5 id="浏览器执行了handleResize、handleClick分别干了什么事情"><a href="#浏览器执行了handleResize、handleClick分别干了什么事情" class="headerlink" title="浏览器执行了handleResize、handleClick分别干了什么事情"></a>浏览器执行了handleResize、handleClick分别干了什么事情</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    ele3 &#123;</span><br><span class="line">        // will-change: transform; 和 translateZ(0) 效果雷同</span><br><span class="line">        translation: transform 0.2s;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">window.addEventListener(&apos;resize&apos;, handleResize)</span><br><span class="line">window.addEventListener(&apos;click&apos;, handleClick)</span><br><span class="line">function handleResize() &#123;</span><br><span class="line">    ele1.style.width = xxx;</span><br><span class="line">    ele1.style.height = yyy;</span><br><span class="line"></span><br><span class="line">    ele2.style.color = &apos;#fff&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function handleClick() &#123;</span><br><span class="line">    ele3.style.transform = &apos;translateX(1000px)&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="浏览器渲染文档的步骤"><a href="#浏览器渲染文档的步骤" class="headerlink" title="浏览器渲染文档的步骤"></a>浏览器渲染文档的步骤</h2><blockquote><p><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn" target="_blank" rel="noopener">https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn</a></p></blockquote><ol><li>处理HTML标记并构建DOM树</li><li>处理CSS标记并构建CSSOM树</li><li>合并DOM&amp;CSSOM 为一个渲染树RenderTree, display: none 的元素并不会出现在RenderTree</li><li>根据RenderTree, 布局(计算节点在页面上的大小和位置)</li><li>将节点绘制到屏幕 </li><li>渲染层合并(见下篇文章)<br><img src="/images/render-tree-construction.png" alt><br><img src="/images/render-tree-step.png" alt></li></ol><p>回到上述问题, resize时浏览器干了啥? </p><ol><li>浏览器窗口resize时, 执行上述步骤 1 -&gt; 4</li><li>确定哪些元素需要Reflow, 或者Repaint: ele1元素需要Reflow, ele2需要Repaint</li><li>浏览器执行Reflow -&gt; Repaint, 这个过程浏览器会使用批处理优化</li></ol><p>click的时候浏览器干了啥?</p><blockquote><p><a href="https://developers.google.com/web/fundamentals/design-and-ux/animations/animations-and-performance" target="_blank" rel="noopener">https://developers.google.com/web/fundamentals/design-and-ux/animations/animations-and-performance</a></p></blockquote><ol><li>css translation动画, 会将transform || opacity 的元素提升一个复合层.</li><li>will-change: transform || opacity; 会告诉浏览器在做更新前就使用最合适的优化, 进行高度优化. 也会将元素强行提升至一个复合层.</li><li>使用js做动画时, js必须在动画的每一帧计算元素的状态, 发送给GPU, 不会将元素提升至一个复合层, 想让元素提升至复合层, 必须使用translateZ或者will-change: transform, opacity;</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// 方式一: CSS动画: 设置以下CSS样式, hover时动画时, 查看Chrome Console 的Layers, 会有两个layer层;</span><br><span class="line">&lt;div class=&apos;bg-change&apos;&gt;&lt;/div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .bg-change &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background: red;</span><br><span class="line">        translation: transform 20s;</span><br><span class="line">    &#125;</span><br><span class="line">    .bg-change:hover &#123;</span><br><span class="line">        transform: translateX(1000px);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">// 方式二 和 方式一样都会产生两个layer</span><br><span class="line">&lt;div class=&quot;bg-change-2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .bg-change-2 &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background: red;</span><br><span class="line">        /* transition: transform 20s; */</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const dom = document.body.querySelector(&apos;.bg-change-2&apos;);</span><br><span class="line">    dom.onclick = function() &#123;</span><br><span class="line">        this.style.transform = &apos;translateX(1000px)&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">// 方式三: 通过js修改样式, requestAnimationFrame 过程中, 如果不加translateZ(0) 只会有一个Layer, translateZ(0) 才能强制的将元素提升一个复合层;</span><br><span class="line">&lt;div class=&quot;bg-change&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .bg-change &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background: red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var bg = document.querySelector(&apos;.bg-change&apos;);</span><br><span class="line">    var distance = 0;</span><br><span class="line">    requestAnimationFrame(function animate()&#123;</span><br><span class="line">        bg.style.transform = &apos;translateX(&apos; + ++distance + &apos;px) translateZ(0)&apos;;</span><br><span class="line">        requestAnimationFrame(animate);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>先了解下浏览器的回流和重绘</p><ol><li>浏览器使用流式布局模型(Flow Based Layout)</li><li>由于浏览器使用流式布局, 对Render Tree的计算通常遍历一次即可, 遇到table或者内部元素通常要花3倍等同元素, 因此避免使用table布局</li><li>回流一定会导致重绘, 重绘未必会引起回流</li></ol><h2 id="回流-Reflow"><a href="#回流-Reflow" class="headerlink" title="回流 Reflow"></a>回流 Reflow</h2><blockquote><p><a href="https://csstriggers.com/" target="_blank" rel="noopener">https://csstriggers.com/</a></p></blockquote><p><code>Render Tree</code> 中部分或全部元素的尺寸、结构、或某些属性发生改变时，浏览器重新渲染部分或全部文档的过程成为回流。<br>导致回流的操作:</p><ul><li>页面首次渲染</li><li>浏览器窗口大小改变</li><li>元素尺寸或位置发生改变</li><li>元素内容变化(文字数量或者图片大小等等)</li><li>元素字体大小变化</li><li>添加或删除可见的DOM元素</li><li>激活CSS伪类(:hover)</li><li>查询某些属性或调用某些方法</li></ul><p>导致回流的属性和方法</p><ul><li>clientWidth、clientHeight、clientTop、clientLeft</li><li>offsetWidth、offsetHeight、offsetTop、offsetLeft</li><li>scrollWidth、scrollHeight、scrollTop、scrollLeft</li><li>scrollIntoView()、scrollIntoViewIfNeeded()</li><li>getComputedStyle()</li><li>getBoundingClientRect()</li><li>scrollTo()</li></ul><h2 id="重绘-Repaint"><a href="#重绘-Repaint" class="headerlink" title="重绘 Repaint"></a>重绘 Repaint</h2><p>当页面中元素样式的改变并不影响它在文档流中的位置时 (例如: <code>color</code>、<code>background-color</code>、<code>visibility</code> …), 浏览器会将新样式赋予给元素并重新绘制。</p><p>浏览器的优化会维护一个队列, 引起回流和重绘的操作放在队列中, 达到一定的阀值会清空队列, 进行一次批处理, 多次合成一次.</p><p>如果访问以下属性或方法, 浏览器会立刻清空队列, 确保你拿到的值是最精确的</p><ul><li>clientWidth、clientHeight、clientTop、clientLeft</li><li>offsetWidth、offsetHeight、offsetTop、offsetLeft</li><li>scrollWidth、scrollHeight、scrollTop、scrollLeft</li><li>width、height</li><li>getComputedStyle()</li><li>getBoundingClientRect()</li></ul><h2 id="避免回流或重绘"><a href="#避免回流或重绘" class="headerlink" title="避免回流或重绘"></a>避免回流或重绘</h2><p>CSS</p><ul><li>避免使用table布局</li><li>尽量在DOM树的最末端改变class</li><li>避免设置多层内联样式</li><li>将动画应用在position属性位absolute或fixed的元素</li><li>避免使用css表达式: calc()</li></ul><p>JS</p><ul><li>避免频繁操作样式, 一次性重写style, 通过把样式写在class中, 一次性更改class属性</li><li>避免频繁操作DOM, 创建一个documentFragment, 在其上应用所有DOM操作, 之后再把dF添加到文档中</li><li>先将元素设置display: none, 操作结束后再显示出来: display: none的元素进行DOM操作不会引发回流和重绘</li><li>避免频繁读取会引起回流/重绘的属性, 如需多次使用, 使用变量缓存起来</li><li>复杂动画的元素使用绝对定位, 使其脱离文档流. 避免引起父元素和后续元素的频繁回流</li></ul>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Async/Await 实现原理</title>
      <link href="/2019/06/10/Async-Await-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
      <url>/2019/06/10/Async-Await-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Async是什么"><a href="#Async是什么" class="headerlink" title="Async是什么"></a>Async是什么</h2><a id="more"></a><h2 id="Async-实现原理"><a href="#Async-实现原理" class="headerlink" title="Async 实现原理"></a>Async 实现原理</h2><p>Async 是对Generator的一个升级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">async function fn(args) &#123;</span><br><span class="line">    // ...awiat</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 等价于</span><br><span class="line"></span><br><span class="line">function fn(args) &#123;</span><br><span class="line">    return spawn(function* () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function spawn(genF) &#123;</span><br><span class="line">    return new Promise(function(resolve, reject) &#123;</span><br><span class="line">        const gen = genF();</span><br><span class="line">        function step(nextF) &#123;</span><br><span class="line">            let next;</span><br><span class="line">            try &#123;</span><br><span class="line">                next = nextF();</span><br><span class="line">            &#125; catch (e) &#123;</span><br><span class="line">                return reject(e);</span><br><span class="line">            &#125;</span><br><span class="line">            if (next.done) &#123;</span><br><span class="line">                return resolve(next.value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Promise.resolve(next.value)</span><br><span class="line">            .then(function(v) &#123;</span><br><span class="line">                step(function() &#123;</span><br><span class="line">                    return gen.next(v);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;, function(v) &#123;</span><br><span class="line">                step(function() &#123;</span><br><span class="line">                    return gen.throw(e);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        step(function() &#123;</span><br><span class="line">            return gen.next(undefined);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Babel-如何对Async-做的编译"><a href="#Babel-如何对Async-做的编译" class="headerlink" title="Babel 如何对Async 做的编译"></a>Babel 如何对Async 做的编译</h4><blockquote><p>参考抽象语法树1: <a href="https://juejin.im/post/5c8d3c48f265da2d8763bdaf#heading-12" target="_blank" rel="noopener">https://juejin.im/post/5c8d3c48f265da2d8763bdaf#heading-12</a><br>参考文档2: <a href="https://segmentfault.com/a/1190000015653342#articleHeader24" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015653342#articleHeader24</a></p></blockquote><ul><li>Babel 通过Babylon(Babel parser) 将async经过词法分析&amp;语法分析后输出AST(抽象语法树) 结构如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">async function fn(args) &#123;</span><br><span class="line">    const t = await 1;</span><br><span class="line">    return t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 可以通过esprima 分析工具查看: http://esprima.org/demo/parse.html#</span><br><span class="line">// 所有节点都会实现以下接口</span><br><span class="line">interface Node &#123;</span><br><span class="line">    type: string;</span><br><span class="line">    range?: [number, number];</span><br><span class="line">    loc? SourceLocation;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface SourceLocation &#123;</span><br><span class="line">    start: Position;</span><br><span class="line">    end: Position;</span><br><span class="line">    source?: string | null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Position &#123;</span><br><span class="line">    line: uint32 &gt;= 1;</span><br><span class="line">    column: uint32 &gt;= 0;</span><br><span class="line">&#125;</span><br><span class="line">// type: FunctionDeclaration 函数声明的抽象树实现以下接口</span><br><span class="line">interface FunctionDeclaration &#123;</span><br><span class="line">    type: &apos;FunctionDeclaration&apos;;</span><br><span class="line">    id: Identifier || null;</span><br><span class="line">    params: FunctionParameter[];</span><br><span class="line">    body: BlockStatement;</span><br><span class="line">    generator: boolean;</span><br><span class="line">    async: boolean;</span><br><span class="line">    expression: false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// AST 结构</span><br><span class="line">&#123;</span><br><span class="line">    type: &apos;Program&apos;,</span><br><span class="line">    sourceType: &apos;script&apos;,</span><br><span class="line">    body: [</span><br><span class="line">        &#123;</span><br><span class="line">            type: &apos;FunctionDeclaration&apos;,</span><br><span class="line">            id: &#123;</span><br><span class="line">                type: &apos;Identifier&apos;,</span><br><span class="line">                name: &apos;fn&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            params: [</span><br><span class="line">                &#123;</span><br><span class="line">                    type: &apos;Identifier&apos;,</span><br><span class="line">                    name: &apos;args&apos;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            body: &#123;</span><br><span class="line">                type: &apos;BlockStatement&apos;,</span><br><span class="line">                body: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        type: &apos;VariableDeclaration&apos;,</span><br><span class="line">                        declarations: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                type: &apos;Identifier&apos;,</span><br><span class="line">                                name: &apos;t</span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        init: &#123;</span><br><span class="line">                            type: &apos;AwaitExpression&apos;,</span><br><span class="line">                            argument: &#123;</span><br><span class="line">                                type: &apos;Literal&apos;,</span><br><span class="line">                                value: 1,</span><br><span class="line">                                raw: 1</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        kind: &apos;const&apos;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        type: &apos;ReturnStatement&apos;,</span><br><span class="line">                        &apos;argument&apos;: &#123;</span><br><span class="line">                            type: &apos;Identifier&apos;,</span><br><span class="line">                            name: &apos;t&apos;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            generator: false,</span><br><span class="line">            expression: false,</span><br><span class="line">            async: true</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>根据 type: ‘FunctionDeclaration’, async: true 将函数转成Generator函数</li><li>将Generator函数AST, 编译成ES5代码</li></ul>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS原理实现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First Day</title>
      <link href="/2019/06/09/First-Day/"/>
      <url>/2019/06/09/First-Day/</url>
      
        <content type="html"><![CDATA[<h4 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h4><ul><li>百度大数据部-数据科学平台前端开发, 主要负责平台数据可视化相关业务设计&amp;开发</li><li>海云数据-数据可视化平台产品设计&amp;开发<a id="more"></a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> work </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
